<?php
/**
* @file
* Code for the modifying volunteer forms.

 */

/**
 * Implements hook_init().
 */
function trails_init() {
    return;
}


/**
* Hook form alter 
* - For add species autocomplete and validate form.
*
*/
function volunteer_form_alter(&$form, &$form_state, $form_id) {
    // if Create Hours Match form
    if ($form_id == 'hours_match_node_form') {
        // Validate PCA & Percentage, and Project Date on the form.
        $form['#validate'][] = '_volunteer_pca_percentage_validate';
        $form['#validate'][] = '_volunteer_match_date_validate';
    }
    // if Create InKind Match form
    if ($form_id == 'inkind_match_node_form') {
        // Validate PCA & Percentage on the form.
        $form['#validate'][] = '_volunteer_pca_percentage_validate';
    }

    // if Add/Edit Participant form
    if ($form_id == 'participant_node_form') {
        // Validate that New Participant does not duplicate exiting record in database
        $form['#validate'][] = '_participant_duplicate_validate';
        $form['#validate'][] = '_participant_field_validate';
    }


//
}

/**
 * Validate PCA Percentages to equal 100%
 *
 */
function _volunteer_pca_percentage_validate ($form, $form_state) {
    $lang = $form_state['values']['language'];

    // if "Use Default checked, then no need to validate PCA Percentages
    if($form_state['values']['field_use_a_default_pca'][$lang][0]["value"] == 0){
        // Make sure all the species percentages equal 100%.
        $total = 0;
        foreach($form_state['values']['field_pca_and_percentage'][$lang] as $delta => $field) {
            if(is_array($field) && is_numeric($delta)) {
                $total += $form['field_pca_and_percentage'][$lang][$delta]['second']['#value'];
            }
        }

        if ($total != 100) {
            form_set_error('field_pca_and_percentage', t('Total PCA Percentage must equal 100%. Current Total = '.$total.'%'));
        }
    }
}

/**
 * Validate Match Project date within Date Range
 *
 */
function _volunteer_match_date_validate ($form, $form_state) {
    // Grab language or use constant LANGUAGE_NONE if not multi-lingual.
    $lang = $form_state['values']['language'];
    $project_start = "";
    $project_end = "";

    //check that a project has been selected
    if(!$form_state['values']['field_project_select'][$lang][0]["nid"]==null){
            // Make sure the project date is between project range
        $date_from_user =  $form['field_date_of_project'][$lang]['0']['#value']['value']['date'];
        // if date is left empty, let required field display error message
        if($date_from_user != ""){
            // Load project node from nid of form project
            $project_node = node_load($form_state['values']['field_project_select'][$lang][0]['nid']);
            // retrieve project start and end dates for project
            if(!empty($project_node->field_project_start_date)){
                $project_start = $project_node->field_project_start_date[$lang][0]['value'];
            }
            if(!empty($project_node->field_project_end_date)){
                $project_end = $project_node->field_project_end_date[$lang][0]['value'];
            }

            // check that Start Date for project exists
            if($project_start == ""){
                form_set_error('field_date_of_project', t('Start Date invalid for Project.  Please add a Start Date on Project Edit Screen'));
            }else if($project_end == ""){ // No Project End Date, so only check that the date_from_user is greater than Project Start Date
                // convert to date only without time element since user entered date has no time.
                $project_start = date("m/d/Y",strtotime($project_start));
            }else{
                // convert to date only without time element since user entered date has no time.
                $project_start = date("m/d/Y",strtotime($project_start));
                $project_end = date("m/d/Y",strtotime($project_end));

            }
            $inRange = false;
            if($project_start != ""){
                $inRange = check_date_in_range($project_start, $project_end, $date_from_user);
            }


            // if not in date range of project return error message
            if (!$inRange ) {
                if($project_end == ""){
                    $project_end = "No End Date";
                }
                form_set_error('field_date_of_project', t('Date of Project not in date range of Project ('.$project_start.' - '.$project_end.')'));
            }
        }
    }
}
/*
 * Check that the User date input falls within the Project start and end dates
 */

function check_date_in_range($start_date, $end_date, $date_from_user)
{
    // Convert to timestamp
    $user_ts = strtotime($date_from_user);

    if($start_date != "" && $end_date != ""){
        // Convert to timestamp
        $start_ts = strtotime($start_date);
        $end_ts = strtotime($end_date);

        // Check that user date is between start & end
        return (($user_ts >= $start_ts) && ($user_ts <= $end_ts));

    }else if($start_date != ""){
        // Convert to timestamp
        $start_ts = strtotime($start_date);
        // Check that user date is greater or equal to start date
        return (($user_ts >= $start_ts));

    }
}

/**
 * Validate that a duplicate Participant has not been entered
 *
 */
function _participant_duplicate_validate ($form, $form_state) {
    // Grab language or use constant LANGUAGE_NONE if not multi-lingual.
    $lang = $form_state['values']['language'];

     $duplicateCount = 0;

    $nodeType = $form_state['values']['type'];
    $firstName = $form_state['values']['field_first_name'][$lang][0]['value'];
    $middleInitial = $form_state['values']['field_middle_initial'][$lang][0]['value'];
    $lastName = $form_state['values']['field_last_name'][$lang][0]['value'];
    $organizationName = $form_state['values']['field_organization_name'][$lang][0]['value'];
    // check to see if Organization Name has been entered, if so validate for duplicate
    if($organizationName != ""){
        $result = db_query('SELECT OrgN.field_organization_name_value
                              , N.nid
          FROM {node} N
            INNER JOIN {field_data_field_organization_name} AS OrgN ON OrgN.entity_id = N.nid
          WHERE N.TYPE = :typeDesc
            AND OrgN.field_organization_name_value = :organizationName
            ', array(':typeDesc' => $nodeType,
                ':organizationName' => $organizationName)
        );
        // Result is returned as a iterable object that returns a stdClass object on each iteration
        foreach ($result as $record) {
            $duplicateCount++;
            $matchName = $record->field_organization_name_value;
        }

        // if duplicate Full Name found, then display error message
        if ($duplicateCount > 0 ) {
             form_set_error('field_organization_name', t('Participant Organization already exists ('.$organizationName.')'));
        }
    // if Organization left blank, check to see if Full Name has been entered
    }else if($firstName != "" and $lastName != ""){
        $result = db_query('SELECT FN.field_first_name_value
                              , MI.field_middle_initial_value
                              , LN.field_last_name_value
                              , N.nid
          FROM {node} N
            INNER JOIN {field_data_field_first_name} AS FN ON FN.entity_id = N.nid
            INNER JOIN {field_data_field_middle_initial} AS MI ON MI.entity_id = N.nid
            INNER JOIN {field_data_field_last_name} AS LN ON LN.entity_id = N.nid
          WHERE N.TYPE = :typeDesc
            AND FN.field_first_name_value = :firstName
            AND MI.field_middle_initial_value = :middleInitial
            AND LN.field_last_name_value = :lastName
            ', array(':typeDesc' => $nodeType,
                     ':firstName' => $firstName,
                     ':middleInitial' => $middleInitial,
                     ':lastName' => $lastName)
            );
        // Result is returned as a iterable object that returns a stdClass object on each iteration
        foreach ($result as $record) {
            $duplicateCount++;
            $matchFirstName = $record->field_first_name_value;
            $matchMiddleInitial = $record->field_middle_initial_value;
            $matchLastName = $record->field_last_name_value;
        }

        // if duplicate Full Name found, then display error message
        if ($duplicateCount > 0 ) {
            $fullName = "";
            if($firstName != ""){
                $fullName .= $firstName;
            }
            if($middleInitial != ""){
                $fullName .= " ".$middleInitial;
            }
            if($lastName != ""){
                $fullName .= " ".$lastName;
            }
            form_set_error('field_first_name', t('Participant Name already exists ('.$fullName.')'));
        }
    }else{
        if($form_state['values']['field_participant_type'][$lang][0]['tid'] == 4){
            form_set_error('field_first_name', t('First and Last Name are required for Volunteer.'));
        }else{
            form_set_error('field_organization_name', t('Organization Name is required.'));
        }
    }

}
/**
 * Validate Project date within Date Range
 *
 */
function _volunteer_get_volunteer_coordinator_uid ($form, $form_state) {
    // Grab language or use constant LANGUAGE_NONE if not multi-lingual.
    $lang = $form_state['values']['language'];


    // Load project node from nid of form project
    $project_node = node_load($form_state['values']['field_project_select'][$lang][0]['nid']);
    // retrieve project start and end dates for project
    $project_start = $project_node->field_project_start_date[$lang][0]['value'];
    $project_end = $project_node->field_project_end_date[$lang][0]['value'];

    // convert to date only without time element since user entered date has no time.
    $project_start = date("m/d/Y",strtotime($project_start));
    $project_end = date("m/d/Y",strtotime($project_end));


    /*$inRange = check_date_in_range($project_start, $project_end, $date_from_user);


    // if not in date range of project return error message
    if (!$inRange ) {
        form_set_error('field_date_of_project', t('Date of Project not in date range of Project ('.$project_start.' - '.$project_end.')'));
    }
    */

}

/**
 * Implements hook_node_access().
 * If user is not in role of grant_administrator and Final Approved (release_to_grants) is marked 'Yes' user may not edit or delete Match Record.
 * NOTE: The function not triggered for Site Administrator (user nid=1)
 * (The administrative account (user ID #1) always passes any access check, so this hook is not called in that case.)
 * Sign in as another user to test this function.
 */
function volunteer_node_access($node, $op, $account) {
    // If $node is a string, the node has not yet been created. We don't care
    // about that case.
    if (is_string($node)) {
        return NODE_ACCESS_IGNORE;
    }
    // Check if $node->type is  Hours Match or In-Kind Match. If not, then IGNORE
    if($node->type != 'hours_match' && $node->type != 'inkind_match'){
        return NODE_ACCESS_IGNORE;
    }

    // check if Update or Delete and if Final Approval and if not Grant Administrator -> then Deny Access to Update or Delete(Edit Tab is hidden)
    if (($op == 'update' || $op == 'delete') && (!empty($account->name) && !in_array('grant_administrator', $account->roles))&& !empty($node->field_release_to_grants[$node->language]) && ($node->field_release_to_grants[$node->language][0]['value'] == 1)) {
        // set message for No Editing Allowed
        drupal_set_message(t('No Editing Allowed after Final Approval.  Grant Administrator must unlock record to Enable Editing.'));
        return NODE_ACCESS_DENY;
    }else{
        return NODE_ACCESS_ALLOW;
    }
}

