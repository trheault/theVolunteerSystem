<?php
/**
* @file
* Code for the modifying volunteer forms.

 */

/**
 * Implements hook_init().
 */
function trails_init() {
    return;
}


/**
* Hook form alter 
* - For add species autocomplete and validate form.
*
*/
function volunteer_form_alter(&$form, &$form_state, $form_id) {
    // if Create Hours Match form
    if ($form_id == 'hours_match_node_form') {
        // Validate PCA & Percentage, and Project Date on the form.
        $form['#validate'][] = '_volunteer_pca_percentage_validate';
        $form['#validate'][] = '_volunteer_project_date_validate';
    }
    // if Create InKind Match form
    if ($form_id == 'inkind_match_node_form') {
        // Validate PCA & Percentage on the form.
        $form['#validate'][] = '_volunteer_pca_percentage_validate';
        //$form['#validate'][] = '_volunteer_project_date_validate';
    }

    // if Create InKind Match form
    if ($form_id == 'participant_node_form') {
        // Validate that New Participant does not duplicate exiting record in database
        $form['#validate'][] = '_participant_duplicate_validate';
    }


}

/**
 * Validate PCA Percentages to equal 100%
 *
 */
function _volunteer_pca_percentage_validate ($form, $form_state) {
    $lang = $form_state['values']['language'];

    // Make sure all the species percentages equal 100%.
    $total = 0;
    foreach($form_state['values']['field_pca_and_percentage'][$lang] as $delta => $field) {
        if(is_array($field) && is_numeric($delta)) {
            $total += $form['field_pca_and_percentage'][$lang][$delta]['second']['#value'];
        }
    }

    if ($total != 100) {
        form_set_error('field_pca_and_percentage', t('Total PCA Percentage must equal 100%. Current Total = '.$total.'%'));
    }
}

/**
 * Validate Project date within Date Range
 *
 */
function _volunteer_project_date_validate ($form, $form_state) {
    // Grab language or use constant LANGUAGE_NONE if not multi-lingual.
    $lang = $form_state['values']['language'];


    // Make sure the project date is between project range
    $date_from_user =  $form['field_date_of_project'][$lang]['0']['#value']['value']['date'];

    // Load project node from nid of form project
    $project_node = node_load($form_state['values']['field_project_select'][$lang][0]['nid']);
    // retrieve project start and end dates for project
    $project_start = $project_node->field_project_start_date[$lang][0]['value'];
    $project_end = $project_node->field_project_end_date[$lang][0]['value'];

    // convert to date only without time element since user entered date has no time.
    $project_start = date("m/d/Y",strtotime($project_start));
    $project_end = date("m/d/Y",strtotime($project_end));


    $inRange = check_date_in_range($project_start, $project_end, $date_from_user);


    // if not in date range of project return error message
    if (!$inRange ) {
        form_set_error('field_date_of_project', t('Date of Project not in date range of Project ('.$project_start.' - '.$project_end.')'));
    }

}
/*
 * Check that the User date input falls within the Project start and end dates
 */

function check_date_in_range($start_date, $end_date, $date_from_user)
{
    // Convert to timestamp
    $start_ts = strtotime($start_date);
    $end_ts = strtotime($end_date);
    $user_ts = strtotime($date_from_user);

    // Check that user date is between start & end
    return (($user_ts >= $start_ts) && ($user_ts <= $end_ts));
}

/**
 * Validate Project date within Date Range
 *
 */
function _participant_duplicate_validate ($form, $form_state) {
    // Grab language or use constant LANGUAGE_NONE if not multi-lingual.
    $lang = $form_state['values']['language'];


    /* run query on database to see if participant exists
    $duplicateCount = 0;
    $sSql = "SELECT field_first_name_value, field_last_name_value,  N.type
              FROM {field_data_field_first_name} AS FN
              INNER JOIN {field_data_field_last_name} AS LN ON FN.entity_id = FN.entity_id
              INNER JOIN {node} N on FN.entity_id = N.nid

              WHERE field_first_name_value = 'Tony'
              AND field_last_name_value =  'Rheault'
              AND N.type = 'participant'";
    $dbResult =  db_query($sSql);
    */
    $duplicateCount = 0;
    $matchFirstName = '';
    $matchLastName = '';
        // URL:  https://api.drupal.org/api/drupal/includes%21database%21database.inc/function/db_query/7

    $nodeType = $form_state['values']['type'];
    $firstName = $form_state['values']['field_first_name'][$lang][0][value];
    $lastName = $form_state['values']['field_last_name'][$lang][0][value];
    $result = db_query('SELECT FN.field_first_name_value, LN.field_last_name_value, N.nid
      FROM {node} N
        INNER JOIN {field_data_field_first_name} AS FN ON FN.entity_id = N.nid
        INNER JOIN {field_data_field_last_name} AS LN ON LN.entity_id = N.nid
      WHERE N.TYPE = :typeDesc
        AND FN.field_first_name_value = :firstName
        AND LN.field_last_name_value = :lastName
        ', array(':typeDesc' => $nodeType,
                 ':firstName' => $firstName,
                 ':lastName' => $lastName)
        );
    // Result is returned as a iterable object that returns a stdClass object on each iteration
    foreach ($result as $record) {
        // Perform operations on $record->title, etc. here.
        // in this example the available data would be mapped to object properties:
        // $record->nid, $record->title, $record->created
        $duplicateCount++;
        $matchFirstName = $record->field_first_name_value;
        $matchLastName = $record->field_last_name_value;

    }



    // if not in date range of project return error message
    if ($duplicateCount > 0 ) {
        form_set_error('field_date_of_project', t('Duplicate Participant name found ('.$firstName.' '.$lastName.')'));
    }

}
/**
 * Validate Project date within Date Range
 *
 */
function _volunteer_get_volunteer_coordinator_uid ($form, $form_state) {
    // Grab language or use constant LANGUAGE_NONE if not multi-lingual.
    $lang = $form_state['values']['language'];


    // Load project node from nid of form project
    $project_node = node_load($form_state['values']['field_project_select'][$lang][0]['nid']);
    // retrieve project start and end dates for project
    $project_start = $project_node->field_project_start_date[$lang][0]['value'];
    $project_end = $project_node->field_project_end_date[$lang][0]['value'];

    // convert to date only without time element since user entered date has no time.
    $project_start = date("m/d/Y",strtotime($project_start));
    $project_end = date("m/d/Y",strtotime($project_end));


    /*$inRange = check_date_in_range($project_start, $project_end, $date_from_user);


    // if not in date range of project return error message
    if (!$inRange ) {
        form_set_error('field_date_of_project', t('Date of Project not in date range of Project ('.$project_start.' - '.$project_end.')'));
    }
    */

}

