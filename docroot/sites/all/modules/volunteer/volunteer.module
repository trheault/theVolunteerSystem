<?php
/**
* @file
* Code for the modifying volunteer forms.

 */

/**
 * Implements hook_init().
 */
function trails_init() {
    return;
}


/**
* Hook form alter 
* - For add species autocomplete and validate form.
*
*/
function volunteer_form_alter(&$form, &$form_state, $form_id) {
    // if Create Hours Match form
    if ($form_id == 'hours_match_node_form') {
        // Validate PCA & Percentage, and Project Date on the form.
        $form['#validate'][] = '_volunteer_pca_percentage_validate';
        $form['#validate'][] = '_volunteer_project_date_validate';
    }
    // if Create InKind Match form
    if ($form_id == 'inkind_match_node_form') {
        // Validate PCA & Percentage on the form.
        $form['#validate'][] = '_volunteer_pca_percentage_validate';
        //$form['#validate'][] = '_volunteer_project_date_validate';
    }
}


/**
* Hook menu
* - add path to autocomplete lookup
*

function volunteer_menu() {
  $items = array();
  // Autocomplete path
  $items['dbpedia/autocomplete'] = array(
    'page callback' => 'dbpedia_autocomplete',
    'access callback' => TRUE,
    'access arguments' => array('access dbpedia autocomplete'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
*  Autocomplete species Lookup
* - get http request from http://wiki.dbpedia.org/lookup/
* - parse xml response, return json
*

function dbpedia_autocomplete($string = '') {
  $found = array();

  $url = 'http://lookup.dbpedia.org/api/search.asmx/PrefixSearch?QueryString='.urlencode($string).'&QueryClass=species&MaxHits=10';
  $result = file_get_contents($url);
  $data = simplexml_load_string($result);

  foreach($data->Result as $res_temp)
  {
      $found[check_plain($res_temp->Label)] = check_plain($res_temp->Label);
  }

  drupal_json_output($found);
}
*/

/**
 * Validate PCA Percentages to equal 100%
 *
 */
function _volunteer_pca_percentage_validate ($form, $form_state) {
    $lang = $form_state['values']['language'];

    // Make sure all the species percentages equal 100%.
    $total = 0;
    foreach($form_state['values']['field_pca_and_percentage'][$lang] as $delta => $field) {
        if(is_array($field) && is_numeric($delta)) {
            $total += $form['field_pca_and_percentage'][$lang][$delta]['second']['#value'];
        }
    }

    if ($total != 100) {
        form_set_error('field_pca_and_percentage', t('Total PCA Percentage must equal 100%. Current Total = '.$total.'%'));
    }
}

/**
 * Validate Project date within Date Range
 *
 */


function _volunteer_project_date_validate ($form, $form_state) {
    // Grab language or use constant LANGUAGE_NONE if not multi-lingual.
    $lang = $form_state['values']['language'];


    // Make sure the project date is between project range
    $date_from_user =  $form['field_date_of_project'][$lang]['0']['#value']['value']['date'];

    // Load project node
    $project_node = node_load($form_state['values']['field_project_select'][$lang][0]['nid']);
    // retrieve project start and end dates for project
    $project_start = $project_node->field_project_start_date[$lang][0]['value'];
    $project_end = $project_node->field_project_end_date[$lang][0]['value'];

    // convert to date only without time element since user date has no time.
    $project_start = date("m/d/Y",strtotime($project_start));
    $project_end = date("m/d/Y",strtotime($project_end));


    $inRange = check_date_in_range($project_start, $project_end, $date_from_user);


    // if not in date range of project return error message
    if (!$inRange ) {
        form_set_error('field_date_of_project', t('Date of Project not in date range of Project ('.$project_start.' - '.$project_end.')'));
    }

}
/*
 * Check that the User date input falls within the Project start and end dates
 */

function check_date_in_range($start_date, $end_date, $date_from_user)
{
    // Convert to timestamp
    $start_ts = strtotime($start_date);
    $end_ts = strtotime($end_date);
    $user_ts = strtotime($date_from_user);

    // Check that user date is between start & end
    return (($user_ts >= $start_ts) && ($user_ts <= $end_ts));
}


